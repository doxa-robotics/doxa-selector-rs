import { AboutSlint, VerticalBox, HorizontalBox, Palette, Button, GroupBox, TabWidget } from "std-widgets.slint";
import { DiagnosticsPopup } from "DiagnosticsPopup.slint";
import { Chip } from "Chip.slint";
import { CategoryPicker, Category } from "CategoryPicker.slint";
import { RoutePicker } from "RoutePicker.slint";
import { MainPicker, BrainDimensions } from "MainPicker.slint";
import { RoutineSelectedCard } from "RoutineSelectedCard.slint";

export component MainWindow inherits Window {
    in property <[Category]> categories;
    in property <bool> gyro-calibrating: false;
    in property <[[StandardListViewItem]]> diagnostics;

    in-out property <bool> gyro-calibration-requested: false;
    in-out property <bool> refresh-diagnostics-requested: false;

    out property <int> picked-category-id: -1;
    out property <int> picked-route-id: -1;
    out property <bool> finished: false;
    out property <bool> diagnostics-open: false;

    background: transparent;

    if diagnostics-open: VerticalLayout {
        DiagnosticsPopup {
            diagnostics: diagnostics;

            calibrate => {
                gyro-calibration-requested = true;
            }
            done => {
                diagnostics-open = false;
            }
        }
    }
    if !diagnostics-open: VerticalLayout {
        // Hardcoded width and height from the size of the V5 brain
        width: BrainDimensions.width;
        height: BrainDimensions.height;

        if finished: Image {
            source: @image-url("./assets/background.png");
        }
        if !finished: VerticalLayout {
            if picked-route-id < 0: MainPicker {
                categories: categories;

                picked(category-id, route-id) => {
                    picked-category-id = category-id;
                    picked-route-id = route-id;
                }
            }
            if picked-route-id >= 0: RoutineSelectedCard {
                category-name: categories[picked-category-id].name;
                route-name: categories[picked-category-id].routes[picked-route-id].name;

                edit => {
                    picked-category-id = -1;
                    picked-route-id = -1;
                }
                done => {
                    finished = true;
                }
            }
        }

        Rectangle {
            background: gyro-calibrating ? #f69a9a : Palette.accent-background;
            animate background {
                duration: 200ms;
                easing: ease-in-out;
            }
            height: 30px;
            HorizontalLayout {
                padding-left: 8px;
                padding-right: 8px;
                padding-top: 2px;
                padding-bottom: 2px;
                spacing: 4px;
                Text {
                    text: "DOXA Robotics 99484A";
                    color: Palette.accent-foreground;
                    vertical-alignment: center;
                    horizontal-stretch: 1;
                }

                Button {
                    text: gyro-calibrating ? "Calibrating..." : "Calibrate gyro";
                    clicked => {
                        gyro-calibration-requested = true;
                    }
                }

                Button {
                    text: "Diagnostics";
                    clicked => {
                        diagnostics-open = true;
                        refresh-diagnostics-requested = true;
                    }
                }
            }
        }
    }
}
