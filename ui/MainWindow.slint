import { AboutSlint, VerticalBox, HorizontalBox, Palette, Button, GroupBox, TabWidget } from "std-widgets.slint";
import { DiagnosticsPopup } from "DiagnosticsPopup.slint";
import { Chip } from "Chip.slint";
import { CategoryPicker, Category } from "CategoryPicker.slint";
import { RoutePicker } from "RoutePicker.slint";
import { MainPicker, BrainDimensions } from "MainPicker.slint";
import { RoutineSelectedCard } from "RoutineSelectedCard.slint";

export component MainWindow inherits Window {
    in property <[Category]> categories: [
        { name: "Left", routes: ["Left 1", "Left 2", "Left 3"] },
        { name: "Center", routes: ["Center 1"] },
        { name: "Right", routes: ["Right 1"] },
        { name: "Skills", routes: ["Skills"] }
    ];
    in property <bool> gyro-calibrating: false;
    in property <[[StandardListViewItem]]> diagnostics: [
        [{ text: "Max motor temperature" }, { text: "120 C" }],
        [{ text: "Motor faults" }, { text: "Over temperature, over current" }],
        [{ text: "Gyro orientation" }, { text: "3 degrees" }],
        [{ text: "Gyro orientation" }, { text: "3 degrees" }],
    ];

    callback picked(category-id: int, route-id: int);
    callback refresh-diagnostics();
    callback calibrate-gyro();

    property <int> picked-category-id: -1;
    property <int> picked-route-id: -1;
    property <bool> diagnostics-open: false;
    out property <bool> finished: false;

    background: transparent;

    VerticalLayout {
        // Hardcoded width and height from the size of the V5 brain
        width: BrainDimensions.width;
        height: BrainDimensions.height;
        if diagnostics-open: DiagnosticsPopup {
            diagnostics: diagnostics;

            refresh => {
                refresh-diagnostics();
            }
            done => {
                diagnostics-open = false;
            }
        }
        if !diagnostics-open: VerticalLayout {
            if finished: Image {
                source: @image-url("../examples/background.png");
            }
            if !finished: VerticalLayout {
                if picked-route-id < 0: MainPicker {
                    categories: categories;

                    picked(category-id, route-id) => {
                        picked-category-id = category-id;
                        picked-route-id = route-id;
                        picked(picked-category-id, picked-route-id);
                    }
                }
                if picked-route-id >= 0: RoutineSelectedCard {
                    category-name: categories[picked-category-id].name;
                    route-name: categories[picked-category-id].routes[picked-route-id];

                    edit => {
                        picked-category-id = -1;
                        picked-route-id = -1;
                    }
                    done => {
                        finished = true;
                    }
                }
            }
        }

        Rectangle {
            background: gyro-calibrating ? #f69a9a : Palette.accent-background;
            animate background {
                duration: 200ms;
                easing: ease-in-out;
            }
            height: 30px;
            HorizontalLayout {
                padding-left: 8px;
                padding-right: 8px;
                padding-top: 2px;
                padding-bottom: 2px;
                spacing: 4px;

                Text {
                    text: "DOXA Robotics 99484A";
                    color: Palette.accent-foreground;
                    vertical-alignment: center;
                    horizontal-stretch: 1;
                }

                Button {
                    text: gyro-calibrating ? "Calibrating..." : "Calibrate gyro";
                }

                Button {
                    text: "Diagnostics";

                    clicked => {
                        diagnostics-open = true;
                    }
                }
            }
        }
    }
}
